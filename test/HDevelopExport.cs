//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;
using HalconEx;

namespace test
{
    public class HDevelopExport : HDevelopExternal
    {
        // Local iconic variables 

        public HObject ho_Image, ho_Contour, ho_ImageModel;
        public HObject ho_ModelContours, ho_ContoursTrans = null;

        // Local control variables 

        HTuple hv_Width = null, hv_Height = null, hv_WindowHandle = new HTuple();
        HTuple hv_Message = null, hv_ModelID = null, hv_J = null;
        HTuple hv_S1 = new HTuple(), hv_Row = new HTuple(), hv_Column = new HTuple();
        HTuple hv_Angle = new HTuple(), hv_ScaleR = new HTuple();
        HTuple hv_ScaleC = new HTuple(), hv_Score = new HTuple();
        HTuple hv_S2 = new HTuple(), hv_Time = new HTuple(), hv_Num = new HTuple();
        HTuple hv_MeanColumn = new HTuple(), hv_I = new HTuple();
        HTuple hv_HomMat2D = new HTuple(), hv_ScaleRowStr = new HTuple();
        HTuple hv_ScaleColStr = new HTuple(), hv_AscentStr = new HTuple();
        HTuple hv_DescentStr = new HTuple(), hv_WidthStr = new HTuple();
        HTuple hv_HeightStr = new HTuple();

        //public HTuple hv_ExpDefaultWinHandle;

        //public new void HDevelopStop()
        //{
        //    MessageBox.Show("Press button to continue", "Program stop");
        //}

        // Procedures 
        // Main procedure 
        private void action()
        {
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_Contour);
            HOperatorSet.GenEmptyObj(out ho_ImageModel);
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_ContoursTrans);

            try
            {
                //This example program shows how to use HALCON's shape-based matching
                //to find SMD capacitors that exhibit independent size changes in the
                //row and column direction in images with a depth of 10 bits
                //(i.e., in images of type uint2).
                //
                dev_update_off();
                //dev_close_window(...);
                //
                //For visualization purposes, we specify the number of significant
                //bits in the uint2 images.  We do this because this information
                //cannot be stored in the image files themselves.
                HOperatorSet.SetSystem("int2_bits", 10);
                ho_Image.Dispose();
                HOperatorSet.ReadImage(out ho_Image, "smd/smd_capacitors_01");
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                dev_open_window_fit_image(ho_Image, 0, 0, -1, -1, out hv_WindowHandle);
                HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
                hv_Message = "This program shows how to use shape-based matching";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[1] = "to find SMD capacitors that exhibit independent";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[2] = "size changes in the row and column direction in";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[3] = "images with a depth of 10 bits.";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[4] = "First a synthetic model for the SMD capacitors";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[5] = "is created. In the next step the created model";
                if (hv_Message == null)
                    hv_Message = new HTuple();
                hv_Message[6] = "is used to find the SMD capacitors.";
                disp_message(hv_ExpDefaultWinHandle, hv_Message, "window", 12, 12, "black",
                    "true");
                disp_continue_message(hv_ExpDefaultWinHandle, "black", "true");
                HDevelopStop();
                //dev_close_window(...);
                //dev_open_window(...);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
                //
                //Create a synthetic model for the SMD capacitors.  This is just
                //a rectangle with rounded corners.
                ho_Contour.Dispose();
                HOperatorSet.GenContourPolygonRoundedXld(out ho_Contour, ((((new HTuple(50)).TupleConcat(
                    100)).TupleConcat(100)).TupleConcat(50)).TupleConcat(50), ((((new HTuple(50)).TupleConcat(
                    50)).TupleConcat(150)).TupleConcat(150)).TupleConcat(50), ((((new HTuple(6)).TupleConcat(
                    6)).TupleConcat(6)).TupleConcat(6)).TupleConcat(6), 1);
                ho_Image.Dispose();
                HOperatorSet.GenImageConst(out ho_Image, "byte", 200, 150);
                ho_ImageModel.Dispose();
                HOperatorSet.PaintXld(ho_Contour, ho_Image, out ho_ImageModel, 128);
                HOperatorSet.CreateAnisoShapeModel(ho_ImageModel, "auto", -((new HTuple(10)).TupleRad()
                    ), (new HTuple(20)).TupleRad(), "auto", 0.9, 1.7, "auto", 0.9, 1.1, "auto",
                    "none", "use_polarity", "auto", 20, out hv_ModelID);
                ho_ModelContours.Dispose();
                HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
                set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
                //
                //Find the models for the SMD capacitors in the images
                //and display the number of found models an the recognition time
                //and the model's scale
                for (hv_J = 1; (int)hv_J <= 4; hv_J = (int)hv_J + 1)
                {
                    ho_Image.Dispose();
                    HOperatorSet.ReadImage(out ho_Image, "smd/smd_capacitors_" + (hv_J.TupleString(
                        "02d")));
                    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    HOperatorSet.CountSeconds(out hv_S1);
                    HOperatorSet.FindAnisoShapeModel(ho_Image, hv_ModelID, -((new HTuple(10)).TupleRad()
                        ), (new HTuple(20)).TupleRad(), 0.9, 1.7, 0.9, 1.1, 0.7, 0, 0.5, "least_squares",
                        0, 0.8, out hv_Row, out hv_Column, out hv_Angle, out hv_ScaleR, out hv_ScaleC,
                        out hv_Score);
                    HOperatorSet.CountSeconds(out hv_S2);
                    hv_Time = (hv_S2 - hv_S1) * 1000;
                    hv_Num = new HTuple(hv_Score.TupleLength());
                    //Display the found models and the recognition time
                    disp_message(hv_ExpDefaultWinHandle, (((hv_Num.TupleString("d")) + " models found in ") + (hv_Time.TupleString(
                        "5.2f"))) + " ms", "window", -1, -1, "black", "true");
                    hv_MeanColumn = hv_Column.TupleMean();
                    HTuple end_val55 = hv_Num - 1;
                    HTuple step_val55 = 1;
                    for (hv_I = 0; hv_I.Continue(end_val55, step_val55); hv_I = hv_I.TupleAdd(step_val55))
                    {
                        //Display the found model.
                        HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                        HOperatorSet.HomMat2dScale(hv_HomMat2D, hv_ScaleR.TupleSelect(hv_I), hv_ScaleC.TupleSelect(
                            hv_I), 0, 0, out hv_HomMat2D);
                        HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Angle.TupleSelect(hv_I), 0,
                            0, out hv_HomMat2D);
                        HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_Row.TupleSelect(hv_I), hv_Column.TupleSelect(
                            hv_I), out hv_HomMat2D);
                        ho_ContoursTrans.Dispose();
                        HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_ContoursTrans,
                            hv_HomMat2D);
                        HOperatorSet.DispObj(ho_ContoursTrans, hv_ExpDefaultWinHandle);
                        //
                        //Display the model's scale next to the found model
                        hv_ScaleRowStr = "ScaleRow=" + (((hv_ScaleR.TupleSelect(hv_I))).TupleString(
                            "5.3f"));
                        hv_ScaleColStr = "ScaleCol=" + (((hv_ScaleC.TupleSelect(hv_I))).TupleString(
                            "5.3f"));
                        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_ScaleRowStr, out hv_AscentStr,
                            out hv_DescentStr, out hv_WidthStr, out hv_HeightStr);
                        if ((int)(new HTuple(((hv_Column.TupleSelect(hv_I))).TupleLessEqual(hv_MeanColumn))) != 0)
                        {
                            disp_message(hv_ExpDefaultWinHandle, hv_ScaleRowStr.TupleConcat(hv_ScaleColStr),
                                "image", (hv_Row.TupleSelect(hv_I)) - 20, ((hv_Column.TupleSelect(hv_I)) - 60) - hv_WidthStr,
                                "green", "false");
                        }
                        else
                        {
                            disp_message(hv_ExpDefaultWinHandle, hv_ScaleRowStr.TupleConcat(hv_ScaleColStr),
                                "image", (hv_Row.TupleSelect(hv_I)) - 20, (hv_Column.TupleSelect(hv_I)) + 60,
                                "green", "false");
                        }
                    }
                    //Deactivate the following lines to run the programm without breaks
                    if ((int)(new HTuple(hv_J.TupleLess(4))) != 0)
                    {
                        disp_continue_message(hv_ExpDefaultWinHandle, "black", "true");
                        HDevelopStop();
                    }
                }
                HOperatorSet.ClearShapeModel(hv_ModelID);
                //Reset the number of significant bits of uint2 images to unknown.
                HOperatorSet.SetSystem("int2_bits", -1);
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Image.Dispose();
                ho_Contour.Dispose();
                ho_ImageModel.Dispose();
                ho_ModelContours.Dispose();
                ho_ContoursTrans.Dispose();

                throw HDevExpDefaultException;
            }
            //ho_Image.Dispose();
            //ho_Contour.Dispose();
            //ho_ImageModel.Dispose();
            //ho_ModelContours.Dispose();
            //ho_ContoursTrans.Dispose();

        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop 
            //HOperatorSet.SetSystem("width", 512);
            //HOperatorSet.SetSystem("height", 512);


        }

        public void RunHalcon(HTuple Window)
        {
            hv_ExpDefaultWinHandle = Window;
            action();
        }

    }
}